version: 2
jobs:
  build_backend:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION }}-{{ arch }}-backend-bundler-{{ checksum "backend/Gemfile.lock" }}'
            - '{{ .Environment.CACHE_VERSION }}-{{ arch }}-backend-bundler-'
      - run: cp .env.sample .env
      - run: docker-compose up -d rails
      - run:
          name: restore gems
          command: |
            docker cp backend/vendor/bundle "$(docker-compose ps -q rails)":/usr/local/bundle
      - run:
          name: install dependencies
          command: docker-compose exec rails bundle install --jobs=4 --retry=3
      - save_cache:
          paths:
            - backend/vendor/bundle
          key: '{{ .Environment.CACHE_VERSION }}-{{ arch }}-backend-bundler-{{ checksum "backend/Gemfile.lock" }}'
      - run:
          name: run rubocop
          command: docker-compose exec rails bundle exec rubocop --parallel
      - run:
          name: sleep for wating launch mysql
          command: |
            while [ "$(docker inspect "$(dc ps -q mysql)" -f '{{.State.Health.Status}}')" != 'healthy' ]; do
              sleep 1
            # done
      - run:
          name: setup db
          command: docker-compose exec -e RAILS_ENV=test rails bundle exec rake db:setup
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            docker-compose run rails bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --format progress

  build_frontend:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION }}-{{ arch }}-frontend-yarn-{{ checksum "frontend/yarn.lock" }}'
            - '{{ .Environment.CACHE_VERSION }}-{{ arch }}-frontend-yarn-'
      - run: cp .env.sample .env
      - run: docker-compose up -d next
      - run:
          name: restore node_modules
          command: |
            docker cp frontend/yarn.lock "$(docker-compose ps -q next)":/usr/local/bundle
      - run:
          name: install dependencies
          command: docker-compose exec next yarn install --frozen-lockfile
      - save_cache:
          paths:
            - frontend/node_modules
          key: '{{ .Environment.CACHE_VERSION }}-{{ arch }}-frontend-yarn-{{ checksum "frontend/yarn.lock" }}'
      - run:
          name: yarn run lint:ts
          command: docker-compose exec next yarn run lint:ts
      - run:
          name: yarn run test:ts
          command: docker-compose exec next yarn run test:ts

  prettier:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION }}-{{ arch }}-yarn-{{ checksum "yarn.lock" }}'
            - '{{ .Environment.CACHE_VERSION }}-{{ arch }}-yarn-'
      - run:
          name: install dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          paths:
            - node_modules
          key: '{{ .Environment.CACHE_VERSION }}-{{ arch }}-yarn-{{ checksum "yarn.lock" }}'
      - run: yarn run format

workflows:
  version: 2
  build:
    jobs:
      - build_frontend
      - build_backend
      - prettier
