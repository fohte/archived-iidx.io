version: 2
jobs:
  build_backend:
    docker:
      - image: circleci/ruby:2.5.3
        environment:
          RAILS_ENV: test
          MYSQL_HOST: 127.0.0.1
      - image: circleci/mysql:5.7.24
    working_directory: ~/repo/backend
    steps:
      - checkout:
          path: ~/repo
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION }}-backend-bundler-{{ checksum "Gemfile.lock" }}'
            - '{{ .Environment.CACHE_VERSION }}-backend-bundler-'
      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          paths:
            - vendor/bundle
          key: '{{ .Environment.CACHE_VERSION }}-backend-bundler-{{ checksum "Gemfile.lock" }}'
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s
      - run: bundle exec rake db:setup
      - run:
          name: run linters
          command: bundle exec rubocop
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --format progress \
                            $TEST_FILES
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  build_frontend:
    docker:
      - image: circleci/node:10.13.0
    working_directory: ~/repo/frontend
    steps:
      - checkout:
          path: ~/repo
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION }}-frontend-yarn-{{ checksum "yarn.lock" }}'
            - '{{ .Environment.CACHE_VERSION }}-frontend-yarn-'
      - run:
          name: install dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          paths:
            - node_modules
          key: '{{ .Environment.CACHE_VERSION }}-frontend-yarn-{{ checksum "yarn.lock" }}'
      - run:
          name: setup .env
          command: cp ~/repo/.env{.sample,}
      - run:
          name: check diff of generated files
          command: |
            dir="$(mktemp -d)"
            yarn run gql:gen --out "$dir/index.tsx"
            diff -uN queries/index.tsx "$dir/index.tsx"
      - run:
          name: run linters
          command: yarn run lint:ts
      - run:
          name: run tests
          command: |
            yarn run test:ci
            yarn run codecov --root=~/repo

  prettier:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION }}-yarn-{{ checksum "yarn.lock" }}'
            - '{{ .Environment.CACHE_VERSION }}-yarn-'
      - run:
          name: install dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          paths:
            - node_modules
          key: '{{ .Environment.CACHE_VERSION }}-yarn-{{ checksum "yarn.lock" }}'
      - run: yarn run format

  build_docker_images:
    docker:
      - image: docker:18.06.1-ce-git
    working_directory: /app
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION }}-docker-{{ .Branch }}'
          paths:
            - /caches/backend.tar
            - /caches/frontend.tar
      - run:
          name: Load Docker image layer caches
          command: |
            set +o pipefail
            docker load -i /caches/backend.tar | true
            docker load -i /caches/frontend.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=backend --build-arg IIDXIO_VERSION="$CIRCLE_SHA1" -t iidxio/backend:latest -f docker/backend/Dockerfile.prod .
            docker tag iidxio/backend:latest "iidxio/backend:$CIRCLE_SHA1"

            docker build --cache-from=frontend --build-arg IIDXIO_VERSION="$CIRCLE_SHA1" -t iidxio/frontend:latest -f docker/frontend/Dockerfile.prod .
            docker tag iidxio/frontend:latest "iidxio/frontend:$CIRCLE_SHA1"
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/backend.tar iidxio/backend
            docker save -o /caches/frontend.tar iidxio/frontend
      - save_cache:
          key: '{{ .Environment.CACHE_VERSION }}-docker-{{ .Branch }}'
          paths:
            - /caches/backend.tar
            - /caches/frontend.tar
      - deploy:
          name: Push application Docker images
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker push "iidxio/backend:$CIRCLE_SHA1"
            docker push iidxio/backend:latest
            docker push "iidxio/frontend:$CIRCLE_SHA1"
            docker push iidxio/frontend:latest

workflows:
  version: 2
  build:
    jobs:
      - build_frontend
      - build_backend
      - prettier
      - build_docker_images:
          requires:
            - build_frontend
            - build_backend
            - prettier
          filters:
            branches:
              only: master
