version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.0.0
  aws-cli: circleci/aws-cli@0.1.3

executors:
  docker-builder:
    docker:
      - image: circleci/python:3.7.3
    working_directory: ~/repo

commands:
  docker-build-and-push:
    parameters:
      repo:
        type: string
      dockerfile:
        type: string
        default: Dockerfile
      path:
        type: string
        default: .
    steps:
      - aws-cli/install
      - aws-cli/configure:
          profile-name: default
      - checkout
      - setup_remote_docker
      - aws-ecr/ecr-login
      - run:
          name: Pull Docker image
          command: |
            docker pull ${AWS_ECR_ACCOUNT_URL}/<< parameters.repo >>:latest || \
              echo 'Failed to find a docker image'
      - run:
          name: Build Docker image
          command: |
            docker build \
              --cache-from ${AWS_ECR_ACCOUNT_URL}/<< parameters.repo >>:latest \
              -f << parameters.dockerfile >> \
              -t ${AWS_ECR_ACCOUNT_URL}/<< parameters.repo >>:latest \
              << parameters.path >>
      - aws-ecr/push-image:
          repo: << parameters.repo >>

jobs:
  test-backend:
    docker:
      - image: circleci/ruby:2.6.3
        environment:
          RAILS_ENV: test
          MYSQL_HOST: 127.0.0.1
      - image: circleci/mysql:5.7.26
    working_directory: ~/repo/backend
    steps:
      - checkout:
          path: ~/repo
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION }}-backend-bundler-{{ checksum "Gemfile.lock" }}'
            - '{{ .Environment.CACHE_VERSION }}-backend-bundler-'
      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          paths:
            - vendor/bundle
          key: '{{ .Environment.CACHE_VERSION }}-backend-bundler-{{ checksum "Gemfile.lock" }}'
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s
      - run: bundle exec rake db:setup
      - run:
          name: run linters
          command: bundle exec rubocop
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --format progress \
                            $TEST_FILES
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  test-frontend:
    docker:
      - image: circleci/node:10.15.2
    working_directory: ~/repo/frontend
    steps:
      - checkout:
          path: ~/repo
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION }}-frontend-yarn-{{ checksum "yarn.lock" }}'
            - '{{ .Environment.CACHE_VERSION }}-frontend-yarn-'
      - run:
          name: install dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          paths:
            - node_modules
          key: '{{ .Environment.CACHE_VERSION }}-frontend-yarn-{{ checksum "yarn.lock" }}'
      - run:
          name: setup .env
          command: cp ~/repo/.env{.sample,}
      - run:
          name: check diff of generated files
          command: |
            yarn run gql:gen

            dir="$(mktemp -d)"
            cp src/queries/index.tsx "$dir/index.tsx"
            git checkout -- src/queries/index.tsx

            diff -uN src/queries/index.tsx "$dir/index.tsx"
      - run:
          name: run linters
          command: yarn run lint:ts
      - run:
          name: run tests
          command: |
            yarn run test:ci
            yarn run codecov --root=~/repo

  prettier:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION }}-yarn-{{ checksum "yarn.lock" }}'
            - '{{ .Environment.CACHE_VERSION }}-yarn-'
      - run:
          name: install dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          paths:
            - node_modules
          key: '{{ .Environment.CACHE_VERSION }}-yarn-{{ checksum "yarn.lock" }}'
      - run: yarn run format

  docker-build-and-push:
    parameters:
      repo:
        type: string
      dockerfile:
        type: string
        default: Dockerfile
      path:
        type: string
        default: .
    executor:
      name: docker-builder
    environment:
      AWS_REGION: ap-northeast-1
      AWS_ECR_ACCOUNT_URL: 711335948892.dkr.ecr.ap-northeast-1.amazonaws.com
    steps:
      - docker-build-and-push:
          repo: << parameters.repo >>
          dockerfile: << parameters.dockerfile >>
          path: << parameters.path >>

workflows:
  commit:
    jobs:
      - test-frontend
      - test-backend
      - prettier
  nightly:
    triggers:
      - schedule:
          cron: '0 18 * * *' # 毎日 3:00 (JST)
          filters:
            branches:
              only: master
    jobs:
      - test-frontend
      - test-backend
      - prettier
      - docker-build-and-push:
          name: build-and-push-frontend-image
          repo: iidx.io/frontend
          dockerfile: docker/frontend/Dockerfile.prod
          requires:
            - test-frontend
            - test-backend
            - prettier
      - docker-build-and-push:
          name: build-and-push-backend-image
          repo: iidx.io/backend
          dockerfile: docker/backend/Dockerfile.prod
          requires:
            - test-frontend
            - test-backend
            - prettier
