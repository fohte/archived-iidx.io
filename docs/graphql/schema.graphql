# Autogenerated return type of CreateUser
type CreateUserPayload {
  user: User!
}

enum Difficulty {
  # Another
  ANOTHER

  # Hyper
  HYPER

  # Normal
  NORMAL
}

type Map {
  difficulty: Difficulty!
  id: ID!
  level: Int!
  maxBpm: Int!
  minBpm: Int!
  numNotes: Int!
  playStyle: PlayStyle!
}

type Music {
  artist: String!
  genre: String!
  id: ID!
  leggendaria: Boolean!
  maps: [Map!]!
  series: Int!
  subTitle: String!
  textageUid: String!
  title: String!
}

type Mutation {
  createUser(displayName: String, username: String!): CreateUserPayload
  registerResultsWithCSV(csv: String!, playStyle: PlayStyle!): RegisterResultsWithCSVPayload
}

enum PlayStyle {
  # DP
  DP

  # SP
  SP
}

type Query {
  # Find a music.
  music(id: ID!): Music

  # Find musics.
  musics: [Music!]

  # Find a user by name.
  user(name: String!): User

  # The currently authenticated user.
  viewer: User
}

# Autogenerated return type of RegisterResultsWithCSV
type RegisterResultsWithCSVPayload {
  success: Boolean!
}

type User {
  id: ID!
  name: String!
  profile: UserProfile!
}

type UserProfile {
  displayName: String!
  id: ID!
}