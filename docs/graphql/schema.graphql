enum ClearLamp {
  """
  Assist Clear
  """
  ASSIST

  """
  Easy Clear
  """
  EASY

  """
  EX Hard Clear
  """
  EX_HARD

  """
  Failed
  """
  FAILED

  """
  FullCombo Clear
  """
  FULL_COMBO

  """
  Hard Clear
  """
  HARD

  """
  Clear
  """
  NORMAL
}

"""
Autogenerated return type of CreateUser
"""
type CreateUserPayload {
  user: User!
}

enum Difficulty {
  """
  Another
  """
  ANOTHER

  """
  Hyper
  """
  HYPER

  """
  Normal
  """
  NORMAL
}

enum Grade {
  """
  A
  """
  A

  """
  AA
  """
  AA

  """
  AAA
  """
  AAA

  """
  B
  """
  B

  """
  C
  """
  C

  """
  D
  """
  D

  """
  E
  """
  E

  """
  F
  """
  F

  """
  Max
  """
  MAX
}

type GradeDiff {
  diff: Int!
  grade: Grade!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Map {
  difficulty: Difficulty!
  id: ID!
  level: Int!
  maxBpm: Int!
  minBpm: Int!
  music: Music!
  numNotes: Int!
  playStyle: PlayStyle!
  result(lastPlayedSince: ISO8601DateTime, lastPlayedUntil: ISO8601DateTime, oldest: Boolean, username: String!): Result
  results(username: String!): [Result!]!
}

type MapList implements Pageable {
  nodes: [Map!]!
  totalCount: Int!
}

type Music {
  artist: String!
  genre: String!
  id: ID!
  leggendaria: Boolean!
  map(difficulty: Difficulty!, playStyle: PlayStyle!): Map
  maps: [Map!]!
  series: Int!
  textageUid: String!
  title: String!
}

type Mutation {
  createUser(displayName: String, username: String!): CreateUserPayload
  registerResultsWithCSV(csv: String!, playStyle: PlayStyle!): RegisterResultsWithCSVPayload
}

interface Pageable {
  totalCount: Int!
}

enum PlayStyle {
  """
  DP
  """
  DP

  """
  SP
  """
  SP
}

type Query {
  """
  Find maps.
  """
  maps: [Map!]

  """
  Find a music.
  """
  music(id: ID!): Music

  """
  Find musics.
  """
  musics: [Music!]

  """
  Search maps.
  """
  searchMaps(difficulties: [Difficulty], levels: [Int], limit: Int, offset: Int, playStyle: PlayStyle, title: String, username: String!): MapList!
  updatedResults(baseDatetime: ISO8601DateTime, limit: Int, offset: Int, targetDatetime: ISO8601DateTime!, username: String!): ResultList!

  """
  Find a user by name.
  """
  user(name: String!): User

  """
  The currently authenticated user.
  """
  viewer: User
}

"""
Autogenerated return type of RegisterResultsWithCSV
"""
type RegisterResultsWithCSVPayload {
  success: Boolean!
}

type Result {
  bpi: Float
  clearLamp: ClearLamp
  gradeDiff: GradeDiff!
  id: ID!
  lastPlayedAt: ISO8601DateTime!
  map: Map!
  missCount: Int
  nearestGradeDiff: GradeDiff!
  nextGradeDiff: GradeDiff!
  score: Int
  scoreRate: Float
  user: User!
}

type ResultList implements Pageable {
  nodes: [Result!]!
  totalCount: Int!
}

type User {
  id: ID!
  name: String!
  profile: UserProfile!
}

type UserProfile {
  displayName: String!
  id: ID!
}