enum ClearLamp {
  """
  Assist Clear
  """
  ASSIST

  """
  Easy Clear
  """
  EASY

  """
  EX Hard Clear
  """
  EX_HARD

  """
  Failed
  """
  FAILED

  """
  FullCombo Clear
  """
  FULL_COMBO

  """
  Hard Clear
  """
  HARD

  """
  Clear
  """
  NORMAL
}

"""
Autogenerated return type of CreateUser
"""
type CreateUserPayload {
  user: User!
}

enum Difficulty {
  """
  Another
  """
  ANOTHER

  """
  Hyper
  """
  HYPER

  """
  Normal
  """
  NORMAL
}

enum Grade {
  """
  A
  """
  A

  """
  AA
  """
  AA

  """
  AAA
  """
  AAA

  """
  B
  """
  B

  """
  C
  """
  C

  """
  D
  """
  D

  """
  E
  """
  E

  """
  F
  """
  F
}

type Map {
  bestResult(username: String!): Result
  difficulty: Difficulty!
  id: ID!
  level: Int!
  maxBpm: Int!
  minBpm: Int!
  music: Music!
  numNotes: Int!
  playStyle: PlayStyle!
}

type Music {
  artist: String!
  genre: String!
  id: ID!
  leggendaria: Boolean!
  map(difficulty: Difficulty!, playStyle: PlayStyle!): Map
  maps: [Map!]!
  series: Int!
  subTitle: String!
  textageUid: String!
  title: String!
}

type Mutation {
  createUser(displayName: String, username: String!): CreateUserPayload
  registerResultsWithCSV(csv: String!, playStyle: PlayStyle!): RegisterResultsWithCSVPayload
}

enum PlayStyle {
  """
  DP
  """
  DP

  """
  SP
  """
  SP
}

type Query {
  """
  Find maps.
  """
  maps: [Map!]

  """
  Find a music.
  """
  music(id: ID!): Music

  """
  Find musics.
  """
  musics: [Music!]

  """
  Find a user by name.
  """
  user(name: String!): User

  """
  The currently authenticated user.
  """
  viewer: User
}

"""
Autogenerated return type of RegisterResultsWithCSV
"""
type RegisterResultsWithCSVPayload {
  success: Boolean!
}

type Result {
  clearLamp: ClearLamp!
  grade: Grade!
  id: ID!
  missCount: Int!
  score: Int!
}

type User {
  id: ID!
  name: String!
  profile: UserProfile!
}

type UserProfile {
  displayName: String!
  id: ID!
}