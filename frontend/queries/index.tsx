/* tslint:disable */

// ====================================================
// START: Typescript template
// ====================================================

// ====================================================
// Types
// ====================================================

export interface Query {
  /** Find musics. */
  musics?: Music[] | null
  /** Find a user by name. */
  user?: User | null
  /** The currently authenticated user. */
  viewer?: User | null
}

export interface Music {
  artist: string

  genre: string

  id: string

  leggendaria: boolean

  maps: Map[]

  series: number

  subTitle: string

  textageUid: string

  title: string
}

export interface Map {
  difficulty: Difficulty

  id: string

  level: number

  maxBpm: number

  minBpm: number

  numNotes: number

  playStyle: PlayStyle
}

export interface User {
  id: string

  name: string

  profile: UserProfile
}

export interface UserProfile {
  displayName: string

  id: string
}

export interface Mutation {
  createUser?: CreateUserPayload | null

  registerResultsWithCSV?: RegisterResultsWithCsvPayload | null
}
/** Autogenerated return type of CreateUser */
export interface CreateUserPayload {
  user: User
}
/** Autogenerated return type of RegisterResultsWithCSV */
export interface RegisterResultsWithCsvPayload {
  success: boolean
}

// ====================================================
// Arguments
// ====================================================

export interface UserQueryArgs {
  name: string
}
export interface CreateUserMutationArgs {
  username: string

  displayName?: string | null
}
export interface RegisterResultsWithCsvMutationArgs {
  csv: string

  playStyle: PlayStyle
}

// ====================================================
// Enums
// ====================================================

export enum Difficulty {
  NORMAL = 'NORMAL',
  HYPER = 'HYPER',
  ANOTHER = 'ANOTHER',
}

export enum PlayStyle {
  SP = 'SP',
  DP = 'DP',
}

// ====================================================
// END: Typescript template
// ====================================================

// ====================================================
// Documents
// ====================================================

export type FindUserVariables = {
  screenName: string
}

export type FindUserQuery = {
  __typename?: 'Query'

  user?: FindUserUser | null
}

export type FindUserUser = {
  __typename?: 'User'

  name: string
}

export type GetMusicsWithMapsVariables = {}

export type GetMusicsWithMapsQuery = {
  __typename?: 'Query'

  musics?: GetMusicsWithMapsMusics[] | null
}

export type GetMusicsWithMapsMusics = {
  __typename?: 'Music'

  id: string

  title: string

  subTitle: string

  maps: GetMusicsWithMapsMaps[]
}

export type GetMusicsWithMapsMaps = {
  __typename?: 'Map'

  id: string

  difficulty: Difficulty

  level: number

  playStyle: PlayStyle
}

export type GetViewerVariables = {}

export type GetViewerQuery = {
  __typename?: 'Query'

  viewer?: GetViewerViewer | null
}

export type GetViewerViewer = {
  __typename?: 'User'

  id: string

  name: string
}

export type RegisterVariables = {
  username: string
  displayName?: string | null
}

export type RegisterMutation = {
  __typename?: 'Mutation'

  createUser?: RegisterCreateUser | null
}

export type RegisterCreateUser = {
  __typename?: 'CreateUserPayload'

  user: RegisterUser
}

export type RegisterUser = {
  __typename?: 'User'

  name: string

  profile: RegisterProfile
}

export type RegisterProfile = {
  __typename?: 'UserProfile'

  displayName: string
}

export type RegisterResultsWithCsvVariables = {
  csv: string
  playStyle: PlayStyle
}

export type RegisterResultsWithCsvMutation = {
  __typename?: 'Mutation'

  registerResultsWithCSV?: RegisterResultsWithCsvRegisterResultsWithCsv | null
}

export type RegisterResultsWithCsvRegisterResultsWithCsv = {
  __typename?: 'RegisterResultsWithCSVPayload'

  success: boolean
}

import * as ReactApollo from 'react-apollo'
import * as React from 'react'

import gql from 'graphql-tag'

// ====================================================
// Components
// ====================================================

export const FindUserDocument = gql`
  query findUser($screenName: String!) {
    user(name: $screenName) {
      __typename
      name
    }
  }
`
export class FindUserComponent extends React.Component<
  Partial<ReactApollo.QueryProps<FindUserQuery, FindUserVariables>>
> {
  render() {
    return (
      <ReactApollo.Query<FindUserQuery, FindUserVariables>
        query={FindUserDocument}
        {...this['props'] as any}
      />
    )
  }
}
export function FindUserHOC<
  TProps = any,
  OperationOptions = ReactApollo.OperationOption<
    TProps,
    FindUserQuery,
    FindUserVariables
  >
>(operationOptions: OperationOptions) {
  return ReactApollo.graphql<TProps, FindUserQuery, FindUserVariables>(
    FindUserDocument,
    operationOptions,
  )
}
export const GetMusicsWithMapsDocument = gql`
  query getMusicsWithMaps {
    musics {
      __typename
      id
      title
      subTitle
      maps {
        __typename
        id
        difficulty
        level
        playStyle
      }
    }
  }
`
export class GetMusicsWithMapsComponent extends React.Component<
  Partial<
    ReactApollo.QueryProps<GetMusicsWithMapsQuery, GetMusicsWithMapsVariables>
  >
> {
  render() {
    return (
      <ReactApollo.Query<GetMusicsWithMapsQuery, GetMusicsWithMapsVariables>
        query={GetMusicsWithMapsDocument}
        {...this['props'] as any}
      />
    )
  }
}
export function GetMusicsWithMapsHOC<
  TProps = any,
  OperationOptions = ReactApollo.OperationOption<
    TProps,
    GetMusicsWithMapsQuery,
    GetMusicsWithMapsVariables
  >
>(operationOptions: OperationOptions) {
  return ReactApollo.graphql<
    TProps,
    GetMusicsWithMapsQuery,
    GetMusicsWithMapsVariables
  >(GetMusicsWithMapsDocument, operationOptions)
}
export const GetViewerDocument = gql`
  query getViewer {
    viewer {
      __typename
      id
      name
    }
  }
`
export class GetViewerComponent extends React.Component<
  Partial<ReactApollo.QueryProps<GetViewerQuery, GetViewerVariables>>
> {
  render() {
    return (
      <ReactApollo.Query<GetViewerQuery, GetViewerVariables>
        query={GetViewerDocument}
        {...this['props'] as any}
      />
    )
  }
}
export function GetViewerHOC<
  TProps = any,
  OperationOptions = ReactApollo.OperationOption<
    TProps,
    GetViewerQuery,
    GetViewerVariables
  >
>(operationOptions: OperationOptions) {
  return ReactApollo.graphql<TProps, GetViewerQuery, GetViewerVariables>(
    GetViewerDocument,
    operationOptions,
  )
}
export const RegisterDocument = gql`
  mutation register($username: String!, $displayName: String) {
    createUser(username: $username, displayName: $displayName) {
      user {
        name
        profile {
          displayName
        }
      }
    }
  }
`
export class RegisterComponent extends React.Component<
  Partial<ReactApollo.MutationProps<RegisterMutation, RegisterVariables>>
> {
  render() {
    return (
      <ReactApollo.Mutation<RegisterMutation, RegisterVariables>
        mutation={RegisterDocument}
        {...this['props'] as any}
      />
    )
  }
}
export function RegisterHOC<
  TProps = any,
  OperationOptions = ReactApollo.OperationOption<
    TProps,
    RegisterMutation,
    RegisterVariables
  >
>(operationOptions: OperationOptions) {
  return ReactApollo.graphql<TProps, RegisterMutation, RegisterVariables>(
    RegisterDocument,
    operationOptions,
  )
}
export const RegisterResultsWithCsvDocument = gql`
  mutation registerResultsWithCSV($csv: String!, $playStyle: PlayStyle!) {
    registerResultsWithCSV(csv: $csv, playStyle: $playStyle) {
      success
    }
  }
`
export class RegisterResultsWithCsvComponent extends React.Component<
  Partial<
    ReactApollo.MutationProps<
      RegisterResultsWithCsvMutation,
      RegisterResultsWithCsvVariables
    >
  >
> {
  render() {
    return (
      <ReactApollo.Mutation<
        RegisterResultsWithCsvMutation,
        RegisterResultsWithCsvVariables
      >
        mutation={RegisterResultsWithCsvDocument}
        {...this['props'] as any}
      />
    )
  }
}
export function RegisterResultsWithCsvHOC<
  TProps = any,
  OperationOptions = ReactApollo.OperationOption<
    TProps,
    RegisterResultsWithCsvMutation,
    RegisterResultsWithCsvVariables
  >
>(operationOptions: OperationOptions) {
  return ReactApollo.graphql<
    TProps,
    RegisterResultsWithCsvMutation,
    RegisterResultsWithCsvVariables
  >(RegisterResultsWithCsvDocument, operationOptions)
}
