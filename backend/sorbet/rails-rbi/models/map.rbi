# This is an autogenerated file for dynamic methods in Map
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Map::Relation < ActiveRecord::Relation
  include Map::NamedScope
  extend T::Generic
  Elem = type_member(fixed: Map)
end

class Map < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend Map::NamedScope
  Elem = type_template(fixed: Map)

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T.nilable(KaidenAverageResult)) }
  def kaiden_average_result(); end

  sig { params(value: T.nilable(KaidenAverageResult)).void }
  def kaiden_average_result=(value); end

  sig { returns(Integer) }
  def level(); end

  sig { params(value: Integer).void }
  def level=(value); end

  sig { returns(Integer) }
  def max_bpm(); end

  sig { params(value: Integer).void }
  def max_bpm=(value); end

  sig { returns(Integer) }
  def min_bpm(); end

  sig { params(value: Integer).void }
  def min_bpm=(value); end

  sig { returns(Music) }
  def music(); end

  sig { params(value: Music).void }
  def music=(value); end

  sig { returns(Integer) }
  def music_id(); end

  sig { params(value: Integer).void }
  def music_id=(value); end

  sig { returns(Integer) }
  def num_notes(); end

  sig { params(value: Integer).void }
  def num_notes=(value); end

  sig { returns(ResultLog::Relation) }
  def result_logs(); end

  sig { params(value: T.any(T::Array[ResultLog], ResultLog::Relation)).void }
  def result_logs=(value); end

  sig { returns(Result::Relation) }
  def results(); end

  sig { params(value: T.any(T::Array[Result], Result::Relation)).void }
  def results=(value); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(T.nilable(WorldRecordResult)) }
  def world_record_result(); end

  sig { params(value: T.nilable(WorldRecordResult)).void }
  def world_record_result=(value); end

end


module Map::NamedScope
  extend T::Sig

  sig { returns(Map::Relation) }
  def all(); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def select(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def order(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def reorder(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def group(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def limit(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def offset(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def left_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def left_outer_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def where(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def rewhere(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def preload(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def eager_load(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def includes(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def from(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def lock(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def readonly(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def extending(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def or(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def having(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def create_with(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def distinct(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def references(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def none(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def unscope(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def merge(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Map::Relation) }
  def except(*args, block); end

end

