# This is an autogenerated file for dynamic methods in TemporaryResult
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class TemporaryResult::Relation < ActiveRecord::Relation
  include TemporaryResult::NamedScope
  extend T::Generic
  Elem = type_member(fixed: TemporaryResult)
end

class TemporaryResult < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend TemporaryResult::NamedScope
  Elem = type_template(fixed: TemporaryResult)

  sig { returns(String) }
  def artist(); end

  sig { params(value: String).void }
  def artist=(value); end

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(String) }
  def genre(); end

  sig { params(value: String).void }
  def genre=(value); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(DateTime) }
  def last_played_at(); end

  sig { params(value: DateTime).void }
  def last_played_at=(value); end

  sig { returns(Integer) }
  def level(); end

  sig { params(value: Integer).void }
  def level=(value); end

  sig { returns(T.nilable(Integer)) }
  def miss_count(); end

  sig { params(value: T.nilable(Integer)).void }
  def miss_count=(value); end

  sig { returns(T.nilable(ResultBatch)) }
  def result_batch(); end

  sig { params(value: T.nilable(ResultBatch)).void }
  def result_batch=(value); end

  sig { returns(T.nilable(Integer)) }
  def result_batch_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def result_batch_id=(value); end

  sig { returns(T.nilable(Integer)) }
  def score(); end

  sig { params(value: T.nilable(Integer)).void }
  def score=(value); end

  sig { returns(String) }
  def title(); end

  sig { params(value: String).void }
  def title=(value); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(User) }
  def user(); end

  sig { params(value: User).void }
  def user=(value); end

  sig { returns(Integer) }
  def user_id(); end

  sig { params(value: Integer).void }
  def user_id=(value); end

  sig { returns(String) }
  def version(); end

  sig { params(value: String).void }
  def version=(value); end

end


module TemporaryResult::NamedScope
  extend T::Sig

  sig { returns(TemporaryResult::Relation) }
  def all(); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def select(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def order(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def reorder(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def group(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def limit(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def offset(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def left_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def left_outer_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def where(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def rewhere(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def preload(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def eager_load(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def includes(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def from(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def lock(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def readonly(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def extending(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def or(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def having(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def create_with(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def distinct(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def references(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def none(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def unscope(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def merge(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(TemporaryResult::Relation) }
  def except(*args, block); end

end

