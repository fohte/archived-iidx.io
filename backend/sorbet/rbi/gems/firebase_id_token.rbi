# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/firebase_id_token/all/firebase_id_token.rbi
#
# firebase_id_token-2.3.0
module FirebaseIdToken
  def self.configuration; end
  def self.configuration=(arg0); end
  def self.configure; end
  def self.reset; end
end
module FirebaseIdToken::Exceptions
end
class FirebaseIdToken::Exceptions::NoCertificatesError < StandardError
  def initialize(message = nil); end
end
class FirebaseIdToken::Exceptions::CertificatesRequestError < StandardError
  def initialize(code); end
end
class FirebaseIdToken::Exceptions::CertificatesTtlError < StandardError
  def initialize(message = nil); end
end
class FirebaseIdToken::Configuration
  def initialize; end
  def project_ids; end
  def project_ids=(arg0); end
  def redis; end
  def redis=(arg0); end
end
class FirebaseIdToken::Certificates
  def initialize; end
  def local_certs; end
  def read_certificates; end
  def redis; end
  def request!; end
  def request; end
  def save_certificates; end
  def self.all; end
  def self.find(kid); end
  def self.present?; end
  def self.request!; end
  def self.request; end
  def self.request_anyway; end
  def self.ttl; end
  def ttl; end
end
class FirebaseIdToken::Signature
  def authorize(payload); end
  def authorized?(payload); end
  def decode_jwt_payload(token, cert_key); end
  def extract_kid(jwt_token); end
  def initialize(jwt_token); end
  def issuer_authorized?(payload); end
  def self.verify(jwt_token); end
  def still_valid?(payload); end
  def verify; end
end
