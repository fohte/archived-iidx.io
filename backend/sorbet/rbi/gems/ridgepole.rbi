# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/ridgepole/all/ridgepole.rbi
#
# ridgepole-0.7.7
module Ridgepole
end
module Ridgepole::Ext
end
module Ridgepole::Ext::AbstractAdapter
end
module Ridgepole::Ext::AbstractAdapter::DisableTableOptions
  def table_options(table_name); end
  def without_table_options(value); end
end
module ActiveRecord
end
module ActiveRecord::ConnectionAdapters
end
class ActiveRecord::ConnectionAdapters::AbstractAdapter
  def self.inherited(subclass); end
end
module Ridgepole::Ext::PpSortHash
  def pretty_print(pp_obj); end
  def self.extend_if_hash(obj); end
end
module Ridgepole::Ext::SchemaDumper
  def foreign_keys(table, stream); end
  def self.prepended(klass); end
end
module Ridgepole::Ext::SchemaDumper::ClassMethods
  def __with_default_fk_name; end
  def with_default_fk_name(value); end
end
class ActiveRecord::SchemaDumper
  extend Ridgepole::Ext::SchemaDumper::ClassMethods
end
class Ridgepole::Client
  def diff(dsl, opts = nil); end
  def dump(&block); end
  def initialize(conn_spec, options = nil); end
  def self.diff(dsl_or_config1, dsl_or_config2, options = nil); end
  def self.dump(conn_spec, options = nil, &block); end
  def self.load_definition(dsl_or_config, options = nil); end
end
class Ridgepole::ConnectionAdapters
  def self.mysql?; end
  def self.postgresql?; end
end
class Ridgepole::DefaultsLimit
  def self.adapter; end
  def self.default_limit(column_type, options); end
end
class Ridgepole::Delta
  def append_add_column(table_name, column_name, attrs, buf); end
  def append_add_foreign_key(table_name, attrs, buf, _options); end
  def append_add_index(table_name, _index_name, attrs, buf, force_bulk_change = nil); end
  def append_add_indices(table_name, delta, buf); end
  def append_change(table_name, attrs, buf, pre_buf_for_fk, post_buf_for_fk); end
  def append_change_column(table_name, column_name, attrs, buf); end
  def append_change_definition(table_name, delta, buf); end
  def append_change_foreign_keys(table_name, delta, pre_buf_for_fk, post_buf_for_fk, options); end
  def append_change_table(table_name, buf); end
  def append_change_table_comment(table_name, table_comment, buf); end
  def append_change_table_options(table_name, table_options, buf); end
  def append_create_table(table_name, attrs, buf, post_buf_for_fk); end
  def append_delete_indices(table_name, delta, buf); end
  def append_drop_table(table_name, _attrs, buf); end
  def append_remove_column(table_name, column_name, _attrs, buf); end
  def append_remove_foreign_key(table_name, attrs, buf, _options); end
  def append_remove_index(table_name, _index_name, attrs, buf); end
  def append_rename_column(table_name, to_column_name, from_column_name, buf); end
  def append_rename_table(to_table_name, from_table_name, buf); end
  def delta_execute; end
  def detect_error_line(exception); end
  def differ?; end
  def eval_script(script, options = nil); end
  def execute_sqls(options = nil); end
  def initialize(delta, options = nil); end
  def inspect_options_include_default_proc(options); end
  def migrate(options = nil); end
  def migrate0(options = nil); end
  def normalize_limit(column_type, column_options); end
  def raise_exception(script, org); end
  def script; end
  def with_pre_post_query(options = nil); end
end
class Ridgepole::Diff
  def build_attrs_if_changed(to_attrs, from_attrs, table_name, primary_key: nil); end
  def build_primary_key_attrs_if_changed(from, to, table_name); end
  def check_table_existence(definition); end
  def collect_relation_info!(table_name, table_attr, relation_info); end
  def columns_all_include?(expected_columns, actual_columns, table_options); end
  def compare_column_attrs(attrs1, attrs2); end
  def convert_to_primary_key_attrs(column_options); end
  def diff(from, to, options = nil); end
  def diff_inspect(obj1, obj2, _options = nil); end
  def fix_change_column_options(table_name, from_attrs, to_attrs); end
  def initialize(options = nil); end
  def normalize_column_options!(attrs, primary_key = nil); end
  def normalize_default_proc_options!(opts1, opts2); end
  def normalize_index_options!(opts); end
  def scan_change(table_name, from, to, delta); end
  def scan_column_rename(from, to, definition_delta); end
  def scan_definition_change(from, to, from_indices, table_name, table_options, table_delta); end
  def scan_foreign_keys_change(from, to, table_delta, options); end
  def scan_indices_change(from, to, to_columns, table_delta, _from_table_options, to_table_options); end
  def scan_options_change(table_name, from, to, table_delta); end
  def scan_relation_info(relation_info); end
  def scan_table_rename(from, to, delta, _options = nil); end
  def target?(table_name); end
end
class Ridgepole::DSLParser
  def check_orphan_foreign_key(definition); end
  def check_orphan_index(definition); end
  def initialize(options = nil); end
  def parse(dsl, opts = nil); end
end
class Ridgepole::DSLParser::Context
  def __definition; end
  def __execute; end
  def add_foreign_key(from_table, to_table, options = nil); end
  def add_index(table_name, column_name, options = nil); end
  def create_table(table_name, options = nil); end
  def execute(sql, _name = nil, &cond); end
  def initialize(opts = nil); end
  def require(file); end
  def self.eval(dsl, opts = nil); end
end
class Ridgepole::DSLParser::TableDefinition
  def __definition; end
  def belongs_to(*args); end
  def bigint(*args); end
  def binary(*args); end
  def bit(*args); end
  def bit_varying(*args); end
  def blob(*args); end
  def boolean(*args); end
  def cidr(*args); end
  def citext(*args); end
  def column(name, type, options = nil); end
  def date(*args); end
  def daterange(*args); end
  def datetime(*args); end
  def decimal(*args); end
  def float(*args); end
  def hstore(*args); end
  def index(name, options = nil); end
  def inet(*args); end
  def initialize(table_name, base); end
  def int4range(*args); end
  def int8range(*args); end
  def integer(*args); end
  def json(*args); end
  def jsonb(*args); end
  def longblob(*args); end
  def longtext(*args); end
  def ltree(*args); end
  def macaddr(*args); end
  def mediumblob(*args); end
  def mediumtext(*args); end
  def money(*args); end
  def numrange(*args); end
  def point(*args); end
  def references(*args); end
  def string(*args); end
  def text(*args); end
  def time(*args); end
  def timestamp(*args); end
  def timestamps(*args); end
  def tinyblob(*args); end
  def tinytext(*args); end
  def tsrange(*args); end
  def tstzrange(*args); end
  def tsvector(*args); end
  def unsigned_bigint(*args); end
  def unsigned_decimal(*args); end
  def unsigned_float(*args); end
  def unsigned_integer(*args); end
  def uuid(*args); end
  def virtual(*args); end
  def xml(*args); end
end
class Ridgepole::Dumper
  def dump; end
  def dump_from(conn); end
  def each_table(dsl); end
  def initialize(options = nil); end
  def target?(table_name); end
end
class Ridgepole::ExecuteExpander
  def self.alter_extra; end
  def self.alter_extra=(obj); end
  def self.callback; end
  def self.callback=(obj); end
  def self.expand_execute(connection); end
  def self.noop; end
  def self.noop=(obj); end
  def self.sql_executer; end
  def self.sql_executer=(obj); end
  def self.use_script; end
  def self.use_script=(obj); end
  def self.with_alter_extra(extra); end
  def self.with_script(script, logger); end
  def self.without_operation(callback = nil); end
end
class Ridgepole::ExecuteExpander::Stub
  def method_missing(_method_name, *_args, &_block); end
  def respond_to_missing?(_symbol, _include_private); end
end
module Ridgepole::ExecuteExpander::ConnectionAdapterExt
  def append_alter_extra(sql); end
  def execute(sql, name = nil); end
end
class Ridgepole::ExternalSqlExecuter
  def execute(sql); end
  def initialize(script, logger); end
end
class Ridgepole::Logger < Logger
  def debug=(value); end
  def initialize; end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  def self.verbose; end
  def self.verbose=(obj); end
  def verbose; end
  def verbose=(obj); end
  def verbose_info(msg); end
  extend Singleton::SingletonClassMethods
  include Singleton
end
module Ridgepole::MigrationExt
  def parse_text(text); end
  def self.prepended(klass); end
  def write(text = nil); end
end
class Ridgepole::MigrationExt::TimeRecorder
  def add_key(key); end
  def add_value(value); end
  def initialize; end
  def result; end
end
class ActiveRecord::Migration
  def disable_logging; end
  def disable_logging=(obj); end
  def self.disable_logging; end
  def self.disable_logging=(obj); end
  def self.record_time; end
  def self.time_recorder; end
  def self.time_recorder=(obj); end
  def time_recorder; end
  def time_recorder=(obj); end
end
module Ridgepole::SchemaDumperExt
  def table(table, stream); end
end
module Ridgepole::SchemaStatementsExt
  def index_name_exists?(*arg0); end
  def rename_table_indexes(*arg0); end
end
